# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, AsyncIterator, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, cast, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, ResourceNotModifiedError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ..._operations._operations import build_radiology_insights_infer_radiology_insights_request
from .._vendor import RadiologyInsightsClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class RadiologyInsightsClientOperationsMixin( 
    RadiologyInsightsClientMixinABC
):

    async def _infer_radiology_insights_initial(
        self,
        id: str,
        resource: Union[_models.RadiologyInsightsJob, JSON, IO[bytes]],
        *,
        expand: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterator[bytes]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))
        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop(
            'cls', None
        )

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_radiology_insights_infer_radiology_insights_request(
            id=id,
            expand=expand,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request,
            stream=_stream,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.HealthInsightsErrorResponse,  response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        if response.status_code == 200:
            response_headers['x-ms-request-id']=self._deserialize('str', response.headers.get('x-ms-request-id'))
            response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))
            
            deserialized = response.iter_bytes()

        if response.status_code == 201:
            response_headers['x-ms-request-id']=self._deserialize('str', response.headers.get('x-ms-request-id'))
            response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))
            
            deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, response_headers) # type: ignore

        return deserialized  # type: ignore



    @overload
    async def begin_infer_radiology_insights(
        self,
        id: str,
        resource: _models.RadiologyInsightsJob,
        *,
        expand: Optional[List[str]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.RadiologyInsightsInferenceResult]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param id: The unique ID of the job. Required.
        :type id: str
        :param resource: The Radiology Insights request. Required.
        :type resource: ~azure.healthinsights.radiologyinsights.models.RadiologyInsightsJob
        :keyword expand: Expand the indicated resources into the response. Default value is None.
        :paramtype expand: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns RadiologyInsightsInferenceResult. The
         RadiologyInsightsInferenceResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.healthinsights.radiologyinsights.models.RadiologyInsightsInferenceResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",
                    "status": "str",
                    "createdAt": "2020-02-20 00:00:00",
                    "error": {
                        "code": "str",
                        "message": "str",
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",
                            "innererror": ...
                        },
                        "target": "str"
                    },
                    "expiresAt": "2020-02-20 00:00:00",
                    "jobData": {
                        "patients": [
                            {
                                "id": "str",
                                "details": {
                                    "birthDate": "2020-02-20",
                                    "clinicalInfo": [
                                        {
                                            "resourceType": "str",
                                            "id": "str",
                                            "implicitRules": "str",
                                            "language": "str",
                                            "meta": {
                                                "lastUpdated": "str",
                                                "profile": [
                                                    "str"
                                                ],
                                                "security": [
                                                    {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                                                        ],
                                                        "id":
                                                          "str",
                "system": "str",
                "version": "str"
                                                    }
                                                ],
                                                "source": "str",
                                                "tag": [
                                                    {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                                                        ],
                                                        "id":
                                                          "str",
                "system": "str",
                "version": "str"
                                                    }
                                                ],
                                                "versionId": "str"
                                            }
                                        }
                                    ],
                                    "sex": "str"
                                },
                                "encounters": [
                                    {
                                        "id": "str",
                                        "class": "str",
                                        "period": {
                                            "end": "2020-02-20 00:00:00",
                                            "start": "2020-02-20
                                              00:00:00"
                                        }
                                    }
                                ],
                                "patientDocuments": [
                                    {
                                        "content": {
                                            "sourceType": "str",
                                            "value": "str"
                                        },
                                        "id": "str",
                                        "type": "str",
                                        "administrativeMetadata": {
                                            "encounterId": "str",
                                            "orderedProcedures": [
                                                {
                                                    "code": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": ...,
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": ...,
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                                                        ],
                "text": "str"
                                                    },
                "description": "str",
                                                    "extension":
                                                      [
                                                        {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "authors": [
                                            {
                                                "fullName": "str",
                                                "id": "str"
                                            }
                                        ],
                                        "clinicalType": "str",
                                        "createdAt": "2020-02-20 00:00:00",
                                        "language": "str",
                                        "specialtyType": "str"
                                    }
                                ]
                            }
                        ],
                        "configuration": {
                            "includeEvidence": bool,
                            "inferenceOptions": {
                                "findingOptions": {
                                    "provideFocusedSentenceEvidence": bool
                                },
                                "followupRecommendationOptions": {
                                    "includeRecommendationsInReferences": bool,
                "includeRecommendationsWithNoSpecifiedModality": bool,
                                    "provideFocusedSentenceEvidence": bool
                                }
                            },
                            "inferenceTypes": [
                                "str"
                            ],
                            "locale": "str",
                            "verbose": bool
                        }
                    },
                    "result": {
                        "modelVersion": "str",
                        "patientResults": [
                            {
                                "inferences": [
                                    radiology_insights_inference
                                ],
                                "patientId": "str"
                            }
                        ]
                    },
                    "updatedAt": "2020-02-20 00:00:00"
                }

                # response body for status code(s): 200, 201
                response == {
                    "modelVersion": "str",
                    "patientResults": [
                        {
                            "inferences": [
                                radiology_insights_inference
                            ],
                            "patientId": "str"
                        }
                    ]
                }
        """

    @overload
    async def begin_infer_radiology_insights(
        self,
        id: str,
        resource: JSON,
        *,
        expand: Optional[List[str]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.RadiologyInsightsInferenceResult]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param id: The unique ID of the job. Required.
        :type id: str
        :param resource: The Radiology Insights request. Required.
        :type resource: JSON
        :keyword expand: Expand the indicated resources into the response. Default value is None.
        :paramtype expand: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns RadiologyInsightsInferenceResult. The
         RadiologyInsightsInferenceResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.healthinsights.radiologyinsights.models.RadiologyInsightsInferenceResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "modelVersion": "str",
                    "patientResults": [
                        {
                            "inferences": [
                                radiology_insights_inference
                            ],
                            "patientId": "str"
                        }
                    ]
                }
        """

    @overload
    async def begin_infer_radiology_insights(
        self,
        id: str,
        resource: IO[bytes],
        *,
        expand: Optional[List[str]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.RadiologyInsightsInferenceResult]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param id: The unique ID of the job. Required.
        :type id: str
        :param resource: The Radiology Insights request. Required.
        :type resource: IO[bytes]
        :keyword expand: Expand the indicated resources into the response. Default value is None.
        :paramtype expand: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns RadiologyInsightsInferenceResult. The
         RadiologyInsightsInferenceResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.healthinsights.radiologyinsights.models.RadiologyInsightsInferenceResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "modelVersion": "str",
                    "patientResults": [
                        {
                            "inferences": [
                                radiology_insights_inference
                            ],
                            "patientId": "str"
                        }
                    ]
                }
        """


    @distributed_trace_async
    async def begin_infer_radiology_insights(
        self,
        id: str,
        resource: Union[_models.RadiologyInsightsJob, JSON, IO[bytes]],
        *,
        expand: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[_models.RadiologyInsightsInferenceResult]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param id: The unique ID of the job. Required.
        :type id: str
        :param resource: The Radiology Insights request. Is one of the following types:
         RadiologyInsightsJob, JSON, IO[bytes] Required.
        :type resource: ~azure.healthinsights.radiologyinsights.models.RadiologyInsightsJob or JSON or
         IO[bytes]
        :keyword expand: Expand the indicated resources into the response. Default value is None.
        :paramtype expand: list[str]
        :return: An instance of AsyncLROPoller that returns RadiologyInsightsInferenceResult. The
         RadiologyInsightsInferenceResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.healthinsights.radiologyinsights.models.RadiologyInsightsInferenceResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",
                    "status": "str",
                    "createdAt": "2020-02-20 00:00:00",
                    "error": {
                        "code": "str",
                        "message": "str",
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",
                            "innererror": ...
                        },
                        "target": "str"
                    },
                    "expiresAt": "2020-02-20 00:00:00",
                    "jobData": {
                        "patients": [
                            {
                                "id": "str",
                                "details": {
                                    "birthDate": "2020-02-20",
                                    "clinicalInfo": [
                                        {
                                            "resourceType": "str",
                                            "id": "str",
                                            "implicitRules": "str",
                                            "language": "str",
                                            "meta": {
                                                "lastUpdated": "str",
                                                "profile": [
                                                    "str"
                                                ],
                                                "security": [
                                                    {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                                                        ],
                                                        "id":
                                                          "str",
                "system": "str",
                "version": "str"
                                                    }
                                                ],
                                                "source": "str",
                                                "tag": [
                                                    {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                                                        ],
                                                        "id":
                                                          "str",
                "system": "str",
                "version": "str"
                                                    }
                                                ],
                                                "versionId": "str"
                                            }
                                        }
                                    ],
                                    "sex": "str"
                                },
                                "encounters": [
                                    {
                                        "id": "str",
                                        "class": "str",
                                        "period": {
                                            "end": "2020-02-20 00:00:00",
                                            "start": "2020-02-20
                                              00:00:00"
                                        }
                                    }
                                ],
                                "patientDocuments": [
                                    {
                                        "content": {
                                            "sourceType": "str",
                                            "value": "str"
                                        },
                                        "id": "str",
                                        "type": "str",
                                        "administrativeMetadata": {
                                            "encounterId": "str",
                                            "orderedProcedures": [
                                                {
                                                    "code": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": ...,
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": ...,
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                                                        ],
                "text": "str"
                                                    },
                "description": "str",
                                                    "extension":
                                                      [
                                                        {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "authors": [
                                            {
                                                "fullName": "str",
                                                "id": "str"
                                            }
                                        ],
                                        "clinicalType": "str",
                                        "createdAt": "2020-02-20 00:00:00",
                                        "language": "str",
                                        "specialtyType": "str"
                                    }
                                ]
                            }
                        ],
                        "configuration": {
                            "includeEvidence": bool,
                            "inferenceOptions": {
                                "findingOptions": {
                                    "provideFocusedSentenceEvidence": bool
                                },
                                "followupRecommendationOptions": {
                                    "includeRecommendationsInReferences": bool,
                "includeRecommendationsWithNoSpecifiedModality": bool,
                                    "provideFocusedSentenceEvidence": bool
                                }
                            },
                            "inferenceTypes": [
                                "str"
                            ],
                            "locale": "str",
                            "verbose": bool
                        }
                    },
                    "result": {
                        "modelVersion": "str",
                        "patientResults": [
                            {
                                "inferences": [
                                    radiology_insights_inference
                                ],
                                "patientId": "str"
                            }
                        ]
                    },
                    "updatedAt": "2020-02-20 00:00:00"
                }

                # response body for status code(s): 200, 201
                response == {
                    "modelVersion": "str",
                    "patientResults": [
                        {
                            "inferences": [
                                radiology_insights_inference
                            ],
                            "patientId": "str"
                        }
                    ]
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))
        cls: ClsType[_models.RadiologyInsightsInferenceResult] = kwargs.pop(
            'cls', None
        )
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop('polling', True)
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token: Optional[str] = kwargs.pop('continuation_token', None)
        if cont_token is None:
            raw_result = await self._infer_radiology_insights_initial(
                id=id,
                resource=resource,
                expand=expand,
                content_type=content_type,
                cls=lambda x,y,z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            await raw_result.http_response.read() # type: ignore
        kwargs.pop('error_map', None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers['x-ms-request-id']=self._deserialize('str', response.headers.get('x-ms-request-id'))
            response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))
            
            deserialized = _deserialize(
                _models.RadiologyInsightsInferenceResult,
                response.json().get("result")
            )
            if cls:
                return cls(pipeline_response, deserialized, response_headers) # type: ignore
            return deserialized


        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }

        if polling is True:
            polling_method: AsyncPollingMethod = cast(AsyncPollingMethod, AsyncLROBasePolling(
                lro_delay,
                
                path_format_arguments=path_format_arguments,
                **kwargs
        ))
        elif polling is False: polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller[_models.RadiologyInsightsInferenceResult].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        return AsyncLROPoller[_models.RadiologyInsightsInferenceResult](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
            )


